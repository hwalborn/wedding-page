{"ast":null,"code":"import api from '../data/apiKey';\nexport default {\n  googleSheets: function googleSheets(sheet) {\n    return new Promise(function (resolve, reject) {\n      fetch(\"https://sheets.googleapis.com/v4/spreadsheets/14OsbtSgGtA911j16Y_QjX6P_etYEJ4sahge0iQn8mcw/values:batchGet?key=\".concat(api.apiKey, \"&ranges=\").concat(sheet, \"&majorDimension=ROWS\")).then(function (resp) {\n        resp.json().then(function (data) {\n          var valueObjects = {};\n          data.valueRanges[0].values.forEach(function (value) {\n            valueObjects[value[0]] = [value[1], value[2]];\n          });\n          return;\n          resolve(valueObjects);\n        });\n      });\n    });\n  }\n};","map":{"version":3,"sources":["/Users/Holt/Documents/real-pro/wedding-page/src/data/dataAccess.js"],"names":["api","googleSheets","sheet","Promise","resolve","reject","fetch","apiKey","then","resp","json","data","valueObjects","valueRanges","values","forEach","value"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,gBAAhB;AAEA,eAAe;AACbC,EAAAA,YAAY,EAAE,sBAACC,KAAD,EAAW;AACvB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,MAAAA,KAAK,0HAAmHN,GAAG,CAACO,MAAvH,qBAAwIL,KAAxI,0BAAL,CACCM,IADD,CACM,UAACC,IAAD,EAAU;AACdA,QAAAA,IAAI,CAACC,IAAL,GACCF,IADD,CACM,UAACG,IAAD,EAAU;AACd,cAAIC,YAAY,GAAG,EAAnB;AACAD,UAAAA,IAAI,CAACE,WAAL,CAAiB,CAAjB,EAAoBC,MAApB,CAA2BC,OAA3B,CAAmC,UAACC,KAAD,EAAW;AAC5CJ,YAAAA,YAAY,CAACI,KAAK,CAAC,CAAD,CAAN,CAAZ,GAAyB,CAACA,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CAAzB;AACD,WAFD;AAGA;AACEZ,UAAAA,OAAO,CAACQ,YAAD,CAAP;AACD,SARH;AASC,OAXH;AAYD,KAbM,CAAP;AAcD;AAhBY,CAAf","sourcesContent":["import api from '../data/apiKey'\n\nexport default {\n  googleSheets: (sheet) => {\n    return new Promise((resolve, reject) => {\n      fetch(`https://sheets.googleapis.com/v4/spreadsheets/14OsbtSgGtA911j16Y_QjX6P_etYEJ4sahge0iQn8mcw/values:batchGet?key=${api.apiKey}&ranges=${sheet}&majorDimension=ROWS`)\n      .then((resp) => {\n        resp.json()\n        .then((data) => {\n          var valueObjects = {}\n          data.valueRanges[0].values.forEach((value) => {\n            valueObjects[value[0]] = [value[1], value[2]]\n          })\n          return\n            resolve(valueObjects)\n          })\n        })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}